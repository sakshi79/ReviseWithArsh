// Question link: https://leetcode.com/problems/partition-to-k-equal-sum-subsets/

class Solution {
    bool possible(vector <int> &nums, vector<bool> &vis, int target, int start, int curr_sum, int k)
    {
        if(k == 1)
            return true;
        if(target == curr_sum)
            return possible(nums, vis, target, 0, 0, k-1);

        for(int i=start; i<nums.size()-1; i++)
        {
            if(vis[i] || nums[i]+curr_sum > target)
                continue;
            vis[i] = true;
            if(possible(nums, vis, target, i+1, curr_sum+nums[i], k))
                return true;
            else
                vis[i] = false;
        }
        return false;
    }
public:
    bool canPartitionKSubsets(vector<int>& nums, int k) {
        int sum = 0;
        sum = accumulate(nums.begin(), nums.end(), sum);
        if(nums.size() < k || sum%k)
            return false;
        int target = sum/k;
        sort(nums.begin(), nums.end(), greater <int>());
        vector <bool> visited(nums.size(), false);
        return possible(nums, visited, target, 0, 0, k);
    }
};
